{"ast":null,"code":"var _jsxFileName = \"/Users/jeong/git/final-project-team2/TeamProject3-MentoringSite/src/main/resources/static/react-grew/src/component/Chatting/Chatting.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport SockJS from 'sockjs-client';\nimport { Client as StompClient } from '@stomp/stompjs';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChattingMessage = ({\n  roomId\n}) => {\n  _s();\n  const navigate = useNavigate(); // 리다이렉트를 위해 사용\n  const [username, setUsername] = useState('');\n  const [messageContent, setMessageContent] = useState('');\n  const [messages, setMessages] = useState([]);\n  const chatContainerRef = useRef(null);\n  let stompClient = useRef(null);\n  useEffect(() => {\n    if (!roomId) {\n      alert('방 번호가 존재하지 않습니다.');\n      navigate('/'); // 유효하지 않은 경우 즉시 리다이렉트\n      return;\n    }\n    console.log('주소에서 받은 roomIdParam : ' + roomId);\n  }, []); // 빈 배열 -> 한 번만 실행\n\n  useEffect(() => {\n    if (!roomId) {\n      // roomId 또는 username이 null일 경우, 아무 작업도 하지 않음\n      return;\n    }\n    console.log('등록된 roomId : ' + roomId);\n    if (roomId) {\n      const enteredUsername = prompt('이름을 입력해주세요:', '');\n      if (enteredUsername) {\n        console.log('입력한 enteredUsername : ' + enteredUsername);\n        setUsername(enteredUsername); // 이름 설정\n      } else {\n        alert('이름을 입력해야 합니다.');\n        navigate(`/chatting/`); // 이름을 입력하지 않으면 리다이렉트\n      }\n    }\n  }, [roomId]);\n  useEffect(() => {\n    if (!roomId || !username) {\n      // roomId 또는 username이 null일 경우, 아무 작업도 하지 않음\n      return;\n    }\n    console.log('입력받았었고 등록된 roomId : ' + roomId);\n    console.log('등록된 username : ' + username);\n    console.log('소켓검사 실시');\n    if (roomId && username) {\n      const socket = new SockJS('http://localhost:8080/chat');\n      console.log('소켓 만들어짐');\n      console.log('소켓에 stomp만들기');\n      stompClient.current = new StompClient({\n        webSocketFactory: () => socket,\n        onConnect: () => {\n          console.log('Connected');\n          stompClient.current.subscribe(`/topic/messages/${roomId}`, response => {\n            const message = JSON.parse(response.body);\n            const messageType = message.memberName === username ? 'sent' : 'received';\n            setMessages(prevMessages => [...prevMessages, {\n              memberName: message.memberName,\n              chatContent: message.chatContent,\n              type: messageType\n            }]);\n          });\n        },\n        onDisconnect: () => console.log('Disconnected')\n      });\n      console.log('stomp만들기 종료');\n      stompClient.current.activate();\n      console.log('클라이언트를 활성화하여 STOMP 연결을 시작합니다.');\n      return () => {\n        if (stompClient.current) {\n          stompClient.current.deactivate(); // 소켓이 연결되었다면 일을 끝낸 뒤 다시 연결 종료\n          console.log('WebSocket 연결을 종료');\n        }\n      };\n    }\n    console.log('소켓검사 종료');\n  }, [roomId, username]);\n  useEffect(() => {\n    // 채팅창 스크롤 자동 이동\n    if (chatContainerRef.current) {\n      chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;\n    }\n  }, [messages]);\n  const handleSendMessage = event => {\n    event.preventDefault();\n    if (messageContent.trim() && stompClient.current) {\n      const message = {\n        chatMessageNo: 0,\n        chatContent: messageContent,\n        chatMessageDate: '',\n        chatMessagerCheck: 0,\n        memberNo: 1,\n        memberName: username,\n        chatRoomNo: roomId\n      };\n      stompClient.current.publish({\n        destination: `/app/chat/${roomId}`,\n        body: JSON.stringify(message)\n      });\n      setMessageContent('');\n    }\n  };\n  if (roomId || username) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-app\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"1:1 Chat Application\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"chat-container\",\n        ref: chatContainerRef,\n        className: \"chat-container\",\n        children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `chat-message ${msg.type}`,\n          children: msg.type === 'sent' ? `${msg.memberName}: ${msg.chatContent}` : `${msg.memberName}: ${msg.chatContent}`\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        id: \"message-form\",\n        className: \"message-form\",\n        onSubmit: handleSendMessage,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"message\",\n          className: \"message-input\",\n          placeholder: \"Type a message...\",\n          value: messageContent,\n          onChange: e => setMessageContent(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          id: \"send\",\n          className: \"send-button\",\n          children: \"\\uC804\\uC1A1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 9\n    }, this);\n  }\n  ;\n};\n_s(ChattingMessage, \"en/fdxFlSX7+HAF1cKKcCaOGcdc=\", false, function () {\n  return [useNavigate];\n});\n_c = ChattingMessage;\nexport default ChattingMessage;\nvar _c;\n$RefreshReg$(_c, \"ChattingMessage\");","map":{"version":3,"names":["React","useState","useEffect","useRef","SockJS","Client","StompClient","useNavigate","jsxDEV","_jsxDEV","ChattingMessage","roomId","_s","navigate","username","setUsername","messageContent","setMessageContent","messages","setMessages","chatContainerRef","stompClient","alert","console","log","enteredUsername","prompt","socket","current","webSocketFactory","onConnect","subscribe","response","message","JSON","parse","body","messageType","memberName","prevMessages","chatContent","type","onDisconnect","activate","deactivate","scrollTop","scrollHeight","handleSendMessage","event","preventDefault","trim","chatMessageNo","chatMessageDate","chatMessagerCheck","memberNo","chatRoomNo","publish","destination","stringify","className","children","fileName","_jsxFileName","lineNumber","columnNumber","id","ref","map","msg","index","onSubmit","placeholder","value","onChange","e","target","_c","$RefreshReg$"],"sources":["/Users/jeong/git/final-project-team2/TeamProject3-MentoringSite/src/main/resources/static/react-grew/src/component/Chatting/Chatting.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport SockJS from 'sockjs-client';\nimport { Client as StompClient } from '@stomp/stompjs';\nimport { useNavigate } from 'react-router-dom';\n\nconst ChattingMessage = ({ roomId }) => {\n  const navigate = useNavigate(); // 리다이렉트를 위해 사용\n  const [username, setUsername] = useState('');\n  const [messageContent, setMessageContent] = useState('');\n  const [messages, setMessages] = useState([]);\n  const chatContainerRef = useRef(null);\n  let stompClient = useRef(null);\n\n  useEffect(() => {\n    if (!roomId) {\n        alert('방 번호가 존재하지 않습니다.');\n        navigate('/'); // 유효하지 않은 경우 즉시 리다이렉트\n        return;\n    }\n    console.log('주소에서 받은 roomIdParam : '+roomId);\n  }, []); // 빈 배열 -> 한 번만 실행\n\n  useEffect(() => {\n    if (!roomId) {\n        // roomId 또는 username이 null일 경우, 아무 작업도 하지 않음\n        return;\n    }\n    console.log('등록된 roomId : '+roomId);\n    if (roomId) {\n        const enteredUsername = prompt('이름을 입력해주세요:', '');\n        if (enteredUsername) {\n            console.log('입력한 enteredUsername : '+enteredUsername);\n            setUsername(enteredUsername); // 이름 설정\n        } else {\n            alert('이름을 입력해야 합니다.');\n            navigate(`/chatting/`); // 이름을 입력하지 않으면 리다이렉트\n        }\n    }\n  }, [roomId]);\n\n  useEffect(() => {\n    if (!roomId || !username) {\n        // roomId 또는 username이 null일 경우, 아무 작업도 하지 않음\n        return;\n    }\n    console.log('입력받았었고 등록된 roomId : '+roomId);\n    console.log('등록된 username : '+username);\n    console.log('소켓검사 실시');\n    if (roomId && username) {\n        const socket = new SockJS('http://localhost:8080/chat');\n        console.log('소켓 만들어짐');\n        console.log('소켓에 stomp만들기');\n        stompClient.current = new StompClient({\n            webSocketFactory: () => socket,\n            onConnect: () => {\n                console.log('Connected');\n                \n                stompClient.current.subscribe(`/topic/messages/${roomId}`, (response) => {\n                    const message = JSON.parse(response.body);\n                    const messageType = message.memberName === username ? 'sent' : 'received';\n                    setMessages((prevMessages) => [\n                        ...prevMessages,\n                        { memberName: message.memberName, chatContent: message.chatContent, type: messageType },\n                    ]);\n                });\n            },\n            onDisconnect: () => console.log('Disconnected'),\n        });\n        console.log('stomp만들기 종료');\n        \n        stompClient.current.activate();\n        console.log('클라이언트를 활성화하여 STOMP 연결을 시작합니다.');\n        \n        return () => {\n            if (stompClient.current) {\n                stompClient.current.deactivate();  // 소켓이 연결되었다면 일을 끝낸 뒤 다시 연결 종료\n                console.log('WebSocket 연결을 종료');\n            }\n        };\n    }\n    console.log('소켓검사 종료');\n  }, [roomId, username]);\n\n  useEffect(() => {\n    // 채팅창 스크롤 자동 이동\n    if (chatContainerRef.current) {\n      chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;\n    }\n  }, [messages]);\n\n  const handleSendMessage = (event) => {\n    event.preventDefault();\n    if (messageContent.trim() && stompClient.current) {\n      const message = {\n        chatMessageNo: 0,\n        chatContent: messageContent,\n        chatMessageDate: '',\n        chatMessagerCheck: 0,\n        memberNo: 1,\n        memberName: username,\n        chatRoomNo : roomId\n      };\n\n      stompClient.current.publish({ destination: `/app/chat/${roomId}`, body: JSON.stringify(message) });\n      setMessageContent('');\n    }\n  };\n\n  if (roomId || username) {\n    return (\n        <div className=\"chat-app\">\n        <h2>1:1 Chat Application</h2>\n\n        <div id=\"chat-container\" ref={chatContainerRef} className=\"chat-container\">\n            {messages.map((msg, index) => (\n            <div key={index} className={`chat-message ${msg.type}`}>\n                {msg.type === 'sent' ? `${msg.memberName}: ${msg.chatContent}` : `${msg.memberName}: ${msg.chatContent}`}\n            </div>\n            ))}\n        </div>\n\n        <form id=\"message-form\" className=\"message-form\" onSubmit={handleSendMessage}>\n            <input\n            type=\"text\"\n            id=\"message\"\n            className=\"message-input\"\n            placeholder=\"Type a message...\"\n            value={messageContent}\n            onChange={(e) => setMessageContent(e.target.value)}\n            />\n            <button type=\"submit\" id=\"send\" className=\"send-button\">\n            전송\n            </button>\n        </form>\n        </div>\n    );\n  };\n};\n\nexport default ChattingMessage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}